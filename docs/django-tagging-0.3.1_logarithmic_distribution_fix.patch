diff --git a/tagging/utils.py b/tagging/utils.py
index e89bab0..bf64924 100644
--- a/tagging/utils.py
+++ b/tagging/utils.py
@@ -218,21 +218,33 @@ def get_tag(tag):
 # Font size distribution algorithms
 LOGARITHMIC, LINEAR = 1, 2
 
-def _calculate_thresholds(min_weight, max_weight, steps):
-    delta = (max_weight - min_weight) / float(steps)
-    return [min_weight + i * delta for i in range(1, steps + 1)]
+def _calculate_min_max_weight(tags, distribution):
+    """
+    Returns minimum and maximum weight of list of tags.
+    """
+    counts = [tag.count for tag in tags]
+    if distribution == LOGARITHMIC:
+        min_weight = math.log(min(counts))
+        max_weight = math.log(max(counts))
+    else:
+        min_weight = float(min(counts))
+        max_weight = float(max(counts))
+
+    return (min_weight, max_weight)
 
-def _calculate_tag_weight(weight, max_weight, distribution):
+def _calculate_tag_weight(weight, min_weight, max_weight, distribution):
     """
     Logarithmic tag weight calculation is based on code from the
     `Tag Cloud`_ plugin for Mephisto, by Sven Fuchs.
 
     .. _`Tag Cloud`: http://www.artweb-design.de/projects/mephisto-plugin-tag-cloud
     """
-    if distribution == LINEAR or max_weight == 1:
-        return weight
+    if min_weight == max_weight:
+        return min_weight
+    elif distribution == LINEAR:
+        return (weight - min_weight) / (max_weight - min_weight)
     elif distribution == LOGARITHMIC:
-        return math.log(weight) * max_weight / math.log(max_weight)
+        return (math.log(weight) - min_weight) / (max_weight - min_weight)
     raise ValueError(_('Invalid distribution algorithm specified: %s.') % distribution)
 
 def calculate_cloud(tags, steps=4, distribution=LOGARITHMIC):
@@ -248,16 +260,12 @@ def calculate_cloud(tags, steps=4, distribution=LOGARITHMIC):
     algorithm which will be used - logarithmic or linear. It must be
     one of ``tagging.utils.LOGARITHMIC`` or ``tagging.utils.LINEAR``.
     """
-    if len(tags) > 0:
-        counts = [tag.count for tag in tags]
-        min_weight = float(min(counts))
-        max_weight = float(max(counts))
-        thresholds = _calculate_thresholds(min_weight, max_weight, steps)
+    if len(tags) == 1:
+        # Optimization for single tag - just set font size to minimum step
+        tags[0].font_size = 1
+    elif len(tags) > 1:
+        min_weight, max_weight = _calculate_min_max_weight(tags, distribution)
         for tag in tags:
-            font_set = False
-            tag_weight = _calculate_tag_weight(tag.count, max_weight, distribution)
-            for i in range(steps):
-                if not font_set and tag_weight <= thresholds[i]:
-                    tag.font_size = i + 1
-                    font_set = True
+            tag_weight = _calculate_tag_weight(tag.count, min_weight, max_weight, distribution)
+            tag.font_size = int(tag_weight * (steps - 1)) + 1
     return tags
